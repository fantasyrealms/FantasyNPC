plugins {
    id 'java'
    id 'maven-publish'
    id("com.gradleup.shadow") version "8.3.5"
    id 'net.kyori.blossom' version "2.1.0"
    id 'net.kyori.indra.git' version "3.1.3"
    id "xyz.jpenilla.run-paper" version "2.3.1"
}

group 'net.fantasyrealms'
version '2.0.0-SNAPSHOT'

compileJava.options.encoding = 'UTF-8'

def gitCommit = indraGit.commit().abbreviate(7).name()

static String getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy.MM.dd')
    return formattedDate
}

compileJava {
    sourceCompatibility = JavaLanguageVersion.of(17)
    targetCompatibility = JavaLanguageVersion.of(17)
    options.compilerArgs += ["-parameters"]
    options.fork = true
}

repositories {
    mavenCentral()

    // Spigot repository
    maven {
        name = 'Spigot'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }

    // Added md5's repository to add the missing BungeeCord-Chat api
    maven {
        name = 'BungeeCord-Chat'
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }

    // PlaceholderAPI
    maven {
        name = "PlaceholderAPI"
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }

    maven {
        name = "sonatype-oss-snapshots1"
        url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
    }

    maven { url = 'https://jitpack.io' }
    maven { url = "https://repo.fantasyrealms.net/releases" }
    maven { url = 'https://repo.jaims.dev/repository/maven-public/' }
    maven { url = "https://repo.dmulloy2.net/repository/public/" }
    maven { url = "https://repo.papermc.io/repository/maven-public/" }
    maven { url = "https://repo.codemc.io/repository/maven-releases/" }
}

ext {
    //Define one of the supported mc versions
    mcVersion = '1.19'
    libsPackage = group + ".fantasynpc.libs."
}

dependencies {
    //Adds the spigot api to your plugin
    compileOnly "org.spigotmc:spigot-api:${mcVersion}-R0.1-SNAPSHOT"

    // Other dependencies
    compileOnly 'me.clip:placeholderapi:2.11.6'
    implementation 'org.bstats:bstats-bukkit:3.0.0'
    implementation 'de.exlll:configlib-yaml:4.5.0'

    // NPC-Lib
    implementation 'io.github.juliarn:npc-lib-api:3.0.0-beta10'
    implementation 'io.github.juliarn:npc-lib-common:3.0.0-beta10'
    implementation 'io.github.juliarn:npc-lib-bukkit:3.0.0-beta10'

    implementation('com.github.cryptomorin:XSeries:13.0.0') { transitive = false }

    implementation 'com.github.Revxrsal.Lamp:common:3.1.5'
    implementation 'com.github.Revxrsal.Lamp:bukkit:3.1.5'

    implementation 'com.github.Chubbyduck1:HologramBridge:15ad8f66a6'
    implementation "cc.happyareabean:MojangAPI:2.0.0"

    // Adventure
    implementation "net.kyori:adventure-api:4.13.1"
    implementation "net.kyori:adventure-platform-bukkit:4.3.0"
    implementation "net.kyori:adventure-text-minimessage:4.13.1"

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

publishing {
    repositories {
        maven {
            name = "frsReleases"
            url = "https://repo.fantasyrealms.net/releases/"
            credentials {
                username findProperty("frsRepositoryUsername").toString()
                password findProperty("frsRepositoryPassword").toString()
            }
        }
    }
    publications {
        maven(MavenPublication) { publication ->
            project.shadow.component(publication)

            publication.setGroupId(group.toString())
            publication.setArtifactId(project.name.toString().toLowerCase())
        }
    }
}

shadowJar {
    archiveClassifier.set('')
}

def versionWithGit = "${project.version}-${gitCommit}"

tasks.processResources {
    expand("pluginVersion": versionWithGit, "commit": gitCommit, "buildDate": getDate())
}

sourceSets {
    main {
        blossom {
            javaSources {
                property("pluginVersion", versionWithGit.toString())
                property("commit", gitCommit)
                property("buildDate", getDate().toString())
            }
        }
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

tasks.named('shadowJar', ShadowJar) {
    enableRelocation true
    relocationPrefix project.group + ".fantasynpc.libs"
}

tasks {
    runServer {

        var SERVER_VER = ""

        if (System.getenv("SERV_VER") != null) {
            SERVER_VER = System.getenv("SERV_VER")
        }

        if (System.getenv("SERV_SLIME") == "1") {
            jvmArgs("-javaagent:${System.getenv("SERV_SLIME_JAR")}")
        }

        if (System.getenv("SERV_JAR") != null) {
            runJar(runDirectory.file(System.getenv("SERV_JAR")))
        }

        if (!SERVER_VER.isEmpty()) {
            minecraftVersion(SERVER_VER)
            runDirectory(file("${project.projectDir}/working/${SERVER_VER}"))
            return
        }

        if (System.getenv("SERV_ENV") == "MODERN") {
            minecraftVersion("1.21.4")
            runDirectory(file("${project.projectDir}/working/modern"))
        } else {
            minecraftVersion("1.8.8")
            runDirectory(file("${project.projectDir}/working/legacy"))
        }

    }
}

int SERV_JAVA = System.getenv("SERV_JAVA") == null ? 21 : System.getenv("SERV_JAVA") as int

tasks.withType(xyz.jpenilla.runtask.task.AbstractRun) {
    javaLauncher = javaToolchains.launcherFor {
        vendor = JvmVendorSpec.JETBRAINS
        languageVersion = JavaLanguageVersion.of(SERV_JAVA)
    }
    jvmArgs "-XX:+AllowEnhancedClassRedefinition"
}